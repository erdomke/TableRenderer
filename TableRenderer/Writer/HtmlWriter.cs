using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using TableRenderer.Model;

namespace TableRenderer.Writer
{
  //http://cosicimiento.blogspot.com/2008/11/styling-excel-cells-with-mso-number.html
  //http://codesnipers.com/?q=excel-compatible-html
  public class HtmlWriter : NormalizingWriter
  {
    private const string ExcelNs = "urn:schemas-microsoft-com:office:excel";

    private bool _inHead;
    private XmlWriter _writer;
    private Stack<IElement> _renderable = new Stack<IElement>();
    private string _format;

    public HtmlWriter(Stream stream)
    {
      _writer = XmlWriter.Create(stream, new XmlWriterSettings()
      {
        CloseOutput = false,
        ConformanceLevel = ConformanceLevel.Fragment,
        Indent = true,
        IndentChars = "  ",
        OmitXmlDeclaration = true
      });
    }
    public HtmlWriter(TextWriter writer)
    {
      _writer = XmlWriter.Create(writer, new XmlWriterSettings()
      {
        CloseOutput = false,
        ConformanceLevel = ConformanceLevel.Fragment,
        Indent = true,
        IndentChars = "  ",
        OmitXmlDeclaration = true
      });
    }
    public HtmlWriter(XmlWriter writer)
    {
      _writer = writer;
    }

    protected override void CloseWriter()
    {
      _writer.Flush();
      _writer.Close();
    }

    public override ITableWriter Configure(IConfiguration config)
    {
      return this;
    }

    protected override void EndElem(IElement elem)
    {
      if (elem is TableHead)
        _inHead = false;
      if (_renderable.Count > 0 && _renderable.Peek() == elem)
      {
        _writer.WriteEndElement();
        _renderable.Pop();
      }
      _format = null;
    }

    protected override void StartElem(IElement elem, bool autoGenerated)
    {
      if (elem is Table)
      {
        _writer.WriteStartElement("table");
        _writer.WriteAttributeString("xmlns", "x", null, ExcelNs);
        WriteStyle(((Table)elem).Style);
      }
      else if (elem is TableHead)
      {
        _writer.WriteStartElement("thead");
        _inHead = true;
      }
      else if (elem is TableBody)
      {
        _writer.WriteStartElement("tbody");
      }
      else if (elem is Row)
      {
        _writer.WriteStartElement("tr");
        WriteStyle(((Row)elem).Style);
      }
      else if (elem is Cell)
      {
        var cell = (Cell)elem;
        _writer.WriteStartElement(_inHead ? "th" : "td");
        WriteStyle(cell.Style);
        if (cell.ColumnSpan > 1)
          _writer.WriteAttributeString("colspan", cell.ColumnSpan.ToString());
        if (cell.RowSpan > 1)
          _writer.WriteAttributeString("rowspan", cell.RowSpan.ToString());
      }
      else if (elem is Caption)
      {
        _writer.WriteStartElement("caption");
      }
      else if (elem is ColGroup)
      {
        _writer.WriteStartElement("colgroup");
      }
      else if (elem is Column)
      {
        var col = (Column)elem;
        _writer.WriteStartElement("col");
        var css = col.ToCss();
        if (!string.IsNullOrEmpty(css))
          _writer.WriteAttributeString("style", css);
      }
      else if (elem is Span)
      {
        _writer.WriteStartElement("span");
      }
      else
      {
        return;
      }

      _renderable.Push(elem);
    }

    private void WriteStyle(Style style)
    {
      if (style == null)
        return;
      if (!string.IsNullOrEmpty(style.Name))
      {
        _writer.WriteAttributeString("class", style.Name);
      }
      else
      {
        _writer.WriteAttributeString("style", style.ToCss());
      }
      _format = style.Format;
    }

    protected override void Value(IElement elem, object value)
    {
      if (value is Image)
      {
        _writer.WriteStartElement("img");
        using (var stream = new MemoryStream())
        {
          ((Image)value).Save(stream, ImageFormat.Png);
          _writer.WriteAttributeString("src", "data:image/png;base64," + Convert.ToBase64String(stream.ToArray()));
        }
        _writer.WriteEndElement();
      }
      else if (value is ILinkedImage)
      {
        var img = (ILinkedImage)value;
        _writer.WriteStartElement("img");
        _writer.WriteAttributeString("src", img.Source.ToString());
        if (!string.IsNullOrEmpty(img.Alt))
          _writer.WriteAttributeString("alt", img.Alt);
        _writer.WriteEndElement();
      }
      else if (value is IHyperlink)
      {
        var hyperlink = (IHyperlink)value;
        _writer.WriteStartElement("a");
        _writer.WriteAttributeString("href", hyperlink.Target.ToString());
        if (string.IsNullOrEmpty(hyperlink.Text))
          _writer.WriteString(hyperlink.Target.ToString());
        else
          _writer.WriteString(hyperlink.Text);
        _writer.WriteEndElement();
      }
      else if (value is Uri)
      {
        var uri = (Uri)value;
        _writer.WriteStartElement("a");
        _writer.WriteAttributeString("href", uri.ToString());
        _writer.WriteString(uri.ToString());
        _writer.WriteEndElement();
      }
      else if (value is System.Web.IHtmlString)
      {
        _writer.WriteRaw(((System.Web.IHtmlString)value).ToHtmlString());
      }
      else if (value is Int16 || value is Int32 || value is Int64 ||
               value is UInt16 || value is UInt32 || value is UInt64 ||
               value is double || value is float || value is decimal)
      {
        if (string.IsNullOrEmpty(_format))
        {
          _writer.WriteAttributeString("num", ExcelNs, value.ToString());
          _writer.WriteString(value.ToString());
        }
        else
        {
          _writer.WriteStartElement("data");
          _writer.WriteAttributeString("num", ExcelNs, value.ToString());
          _writer.WriteAttributeString("value", value.ToString());
          _writer.WriteString(((IFormattable)value).ToString(_format, CultureInfo.CurrentCulture));
          _writer.WriteEndElement();
        }
      }
      else if (value is bool)
      {
        _writer.WriteAttributeString("bool", ExcelNs, ((bool)value ? "TRUE" : "FALSE"));
        _writer.WriteStartElement("span");
        _writer.WriteAttributeString("data-bool", ((bool)value ? "1" : "0"));
        _writer.WriteString((bool)value ? "TRUE" : "FALSE");
        _writer.WriteEndElement();
      }
      else if (value is DateTime)
      {
        var date = (DateTime)value;
        _writer.WriteStartElement("time");
        if (date.Date == date)
          _writer.WriteAttributeString("datetime", date.ToString("yyyy-MM-dd"));
        else
          _writer.WriteAttributeString("datetime", date.ToString("yyyy-MM-ddThh:mm:ss"));

        if (string.IsNullOrEmpty(_format))
        {
          _writer.WriteString(date.ToString());
        }
        else
        {
          _writer.WriteString(date.ToString(_format, CultureInfo.CurrentCulture));
        }
        _writer.WriteEndElement();
      }
      else if (value == null || (value is string && (string)value == string.Empty))
      {
        _writer.WriteAttributeString("str", ExcelNs, null);
        _writer.WriteRaw("&nbsp;");
      }
      else
      {
        string formatted;
        if (value is IEnumerable<string>)
          formatted = string.Join(", ", (IEnumerable<string>)value);
        else
          formatted = value.ToString();

        _writer.WriteAttributeString("str", ExcelNs, null);
        _writer.WriteString(formatted);
      }
    }
  }
}
