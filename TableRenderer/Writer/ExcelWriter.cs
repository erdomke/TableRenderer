using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Drawing.Spreadsheet;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using A = DocumentFormat.OpenXml.Drawing;
using A14 = DocumentFormat.OpenXml.Office2010.Drawing;
using S = DocumentFormat.OpenXml.Spreadsheet;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TableRenderer.Model;
using M = TableRenderer.Model;
using System.Security.Cryptography;

namespace TableRenderer.Writer
{
  public class ExcelWriter : NormalizingWriter
  {
    private int _sheetIndex = 1;

    private BordersHelper _borders = new BordersHelper();
    private FillsHelper _fills = new FillsHelper();
    private FontsHelper _fonts = new FontsHelper();
    private SharedStrings _sharedStrings = new SharedStrings();
    private StylesHelper _styles;

    private SpreadsheetDocument _spreadsheetDoc;
    private WorkbookPart _workbookpart;

    private bool _autoFilter;
    private string _rowSpan;
    private HyperlinkHelper _hyperlinks;
    private ImageHelper _images;
    private PageLayout _layout;
    private WorksheetPart _worksheetPart;
    private OpenXmlWriter _writer;

    private List<object> _cache = new List<object>();
    private bool _cacheValues;

    private int ColumnNumber { get { return _colIndex + 1; } }
    private int RowNumber { get { return _rowIndex + 1; } }

    public ExcelWriter(Stream stream)
    {
      // Add a WorkbookPart to the document.
      _spreadsheetDoc = SpreadsheetDocument.Create(stream, SpreadsheetDocumentType.Workbook);
      _workbookpart = _spreadsheetDoc.AddWorkbookPart();
      // Keep a constant ID for unit testing
      _spreadsheetDoc.ChangeIdOfPart(_workbookpart, "Rb1618a20437d4f1f");
      _workbookpart.Workbook = new Workbook();

      var views = _workbookpart.Workbook.AppendChild(new BookViews());
      var view = new WorkbookView { WindowHeight = 6855, WindowWidth = 14055, XWindow = 510, YWindow = 555 };
      views.Append(view);

      _layout = new PageLayout();
      _styles = new StylesHelper(_borders, _fonts, _fills, null);

      this.NormalizeMergedCells = true;
    }


    public override ITableWriter Configure(IConfiguration config)
    {
      _layout = (config as PageLayout) ?? _layout;
      return this;
    }

    protected override void StartElem(IElement elem, bool autoGenerated)
    {
      if (_cacheValues)
        _cache.Add(elem);
      else if (elem is M.Cell)
        _cacheValues = true;
      else if (elem is ColGroup)
        Start((ColGroup)elem);
      else if (elem is M.Column)
        Start((M.Column)elem);
      else if (elem is M.Row)
        Start((M.Row)elem);
      else if (elem is M.Table)
        Start((M.Table)elem);
      else if (elem is M.Sheet)
        Start((M.Sheet)elem);
    }

    private void Start(ColGroup colGroup)
    {
      _writer.WriteStartElement(new Columns());
    }

    private void Start(M.Column column)
    {
      var width = column.Width.ToPx();
      if (width < 1)
        width = 64;

      var attr = new List<OpenXmlAttribute>() {
        new OpenXmlAttribute("min", null, ColumnNumber.ToString()),
        new OpenXmlAttribute("max", null, ColumnNumber.ToString()),
        new OpenXmlAttribute("width", null, (width / 7.0).ToString()),
        new OpenXmlAttribute("customWidth", null, "1")
      };
      if (column.Visibility == Visibility.Hidden || column.Visibility == Visibility.Collapse)
        attr.Add(new OpenXmlAttribute("hidden", null, "1"));
      _writer.WriteStartElement(new S.Column(), attr);
      _writer.WriteEndElement();
    }

    private void Start(M.Sheet sheet)
    {
      var partId = "rId" + _sheetIndex;

      // Add a WorksheetPart to the WorkbookPart.
      _worksheetPart = _workbookpart.AddNewPart<WorksheetPart>(partId);
      _images = new ImageHelper(_worksheetPart.AddNewPart<DrawingsPart>(partId), this);
      _hyperlinks = new HyperlinkHelper(_worksheetPart);
      _writer = OpenXmlWriter.Create(_worksheetPart);
      _writer.WriteStartElement(new Worksheet());

      var name = GetSheetName(sheet.Name);

      if (_workbookpart.Workbook.Sheets == null)
        _workbookpart.Workbook.AppendChild(new Sheets());

      var sheets = _workbookpart.Workbook.Sheets;
      sheets.Append(new S.Sheet()
      {
        Id = _spreadsheetDoc.WorkbookPart.GetIdOfPart(_worksheetPart),
        SheetId = (uint)_sheetIndex,
        Name = name
      });
    }

    private void Start(M.Table table)
    {
      _autoFilter = table.AutoFilter;
      _writer.WriteStartElement(new SheetViews());
      _writer.WriteStartElement(new SheetView(), new OpenXmlAttribute[] {
            new OpenXmlAttribute("tabSelected", null, "1"),
            new OpenXmlAttribute("workbookViewId", null, "0")
          });
      if (table.RepeatRowsEachPage > 0)
      {
        _writer.WriteStartElement(new Pane()
        {
          VerticalSplit = 1,
          TopLeftCell = "A" + (table.RepeatRowsEachPage + 1),
          ActivePane = PaneValues.BottomLeft,
          State = PaneStateValues.FrozenSplit
        });
        _writer.WriteEndElement();
      }
      _writer.WriteEndElement();
      _writer.WriteEndElement();
    }
    private void Start(M.Row row)
    {
      var attr = new List<OpenXmlAttribute>() {
        new OpenXmlAttribute("r", null, RowNumber.ToString()),
        new OpenXmlAttribute("spans", null, _rowSpan)
      };
      if (row.Style != null && row.Style.Height.Unit != UnitType.Empty)
      {
        attr.Add(new OpenXmlAttribute("ht", null, (row.Style.Height.ToPx() / 7.0).ToString("0.##")));
      }
      _writer.WriteStartElement(new S.Row(), attr);
    }

    protected override void Value(IElement elem, object value)
    {
      if (_cacheValues)
        _cache.Add(value);
    }

    protected override void EndElem(IElement elem)
    {
      if (elem is M.Cell)
        WriteCell((M.Cell)elem);
      else if (_cacheValues)
        _cache.Add(EndElement.Instance);
      else if (elem is ColGroup)
        End((ColGroup)elem);
      else if (elem is M.Row)
        End((M.Row)elem);
      else if (elem is M.Sheet)
        End((M.Sheet)elem);
    }

    private void End(ColGroup colGroup)
    {
      _writer.WriteEndElement();
      _writer.WriteStartElement(new SheetData());

      _rowSpan = "1:" + _columns.Count.ToString();
    }

    private void End(M.Row row)
    {
      _writer.WriteEndElement();
    }

    private void End(M.Sheet sheet)
    {
      var partId = "rId" + _sheetIndex;
      _writer.WriteEndElement(); //Finish the sheetData tag

      if (_autoFilter)
      {
        _writer.WriteStartElement(new AutoFilter(), new OpenXmlAttribute[] {
                new OpenXmlAttribute("ref", null, "A1:" + CellAddress.GetColumnDesignator(_colIndex - 1) + _rowIndex.ToString())
              });
        _writer.WriteEndElement();

        var defNames = _workbookpart.Workbook.AppendChild(new DefinedNames());
        var defName = defNames.AppendChild(new DefinedName()
        {
          Hidden = true,
          LocalSheetId = 0,
          Name = "_xlnm._FilterDatabase",
          Text = "'" + GetSheetName(sheet.Name) + "'!$A$1:$" + CellAddress.GetColumnDesignator(_colIndex - 1) + "$" + _rowIndex.ToString()
        });
        _autoFilter = false;
      }

      if (_mergedCells.Any())
      {
        _writer.WriteStartElement(new MergeCells());
        foreach (var merge in _mergedCells)
        {
          _writer.WriteElement(new MergeCell()
          {
            Reference = merge.GetStartAddress().ToString() + ":" + merge.GetEndAddress().ToString()
          });
        }
      }

      if (_hyperlinks.Count > 0)
      {
        _hyperlinks.Render(_writer);
      }
      if (_images.Count > 0)
      {
        _writer.WriteStartElement(new Drawing(), new OpenXmlAttribute[] {
            new OpenXmlAttribute("id", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", partId)
          });
        _writer.WriteEndElement();
      }

      _writer.WriteEndElement();

      _writer.Close();

      _writer = null;
      _worksheetPart = null;
      _images = null;
      _hyperlinks = null;
      _sheetIndex++;
    }

    protected override void CloseWriter()
    {
      if (_spreadsheetDoc != null)
      {
        // Add the Styles
        var workbookStylesPart = _workbookpart.AddNewPart<WorkbookStylesPart>("rId" + _sheetIndex);
        var styleSheet = new Stylesheet();

        styleSheet.Append(_fonts.Part);
        styleSheet.Append(_fills.Part);
        styleSheet.Append(_borders.Part);

        var cellStyleFormats = new CellStyleFormats() { Count = 1U };
        var cellFormat = new CellFormat() { NumberFormatId = 0U, FontId = 0U, FillId = 0U, BorderId = 0U, ApplyNumberFormat = false, ApplyBorder = false, ApplyAlignment = false };
        cellStyleFormats.Append(cellFormat);
        styleSheet.Append(cellStyleFormats);

        styleSheet.Append(_styles.Part);

        var cellStyles = new CellStyles() { Count = 1U };
        var cellStyle = new S.CellStyle() { Name = "Normal", FormatId = 0U, BuiltinId = 0U };
        cellStyles.Append(cellStyle);
        styleSheet.Append(cellStyles);

        workbookStylesPart.Stylesheet = styleSheet;

        // Deal with the shared strings
        var sharedStringPart = _workbookpart.AddNewPart<SharedStringTablePart>("rId" + (_sheetIndex + 1));
        sharedStringPart.SharedStringTable = _sharedStrings.Part;

        _workbookpart.Workbook.Save();

        // Close the document.
        _spreadsheetDoc.Close();
        _spreadsheetDoc.Dispose();
        _spreadsheetDoc = null;
      }
    }

    public string GetSheetName(string name)
    {
      if (string.IsNullOrEmpty(name))
        return "Sheet" + _sheetIndex;

      var result = new char[name.Length];
      var j = 0;
      for (var i = 0; i < name.Length; i++)
      {
        switch (name[i])
        {
          case '*':
          case '[':
          case ']':
          case '\\':
          case '/':
          case ':':
          case '?':
            // Ignore these items;
            break;
          case '\'':
            if (j != 0)
            {
              result[j] = name[i];
              j++;
            }
            break;
          default:
            result[j] = name[i];
            j++;
            break;
        }
      }

      if (j > 31)
      {
        // Configure an ellipsis
        result[28] = '.';
        result[29] = '.';
        result[30] = '.';
      }

      return new string(result, 0, Math.Min(j, 31));
    }

    private void WriteCell(M.Cell cell)
    {
      if (_cache.Count == 0)
      {
        WriteCell(cell, null, cell.Style);
      }
      else if (_cache.Count == 1)
      {
        WriteCell(cell, _cache[0], cell.Style);
      }
      else if (_cache.Count == 3
        && _cache[0] is Span
        && _cache[2] == EndElement.Instance)
      {
        WriteCell(cell, _cache[1], Style.GetMerged(cell.Style, ((Span)_cache[0]).Style));
      }
      else if (cell is M.MergedCell)
      {
        WriteCell(cell, null, cell.Style);
      }
      else
      {
        int index;
        var richText = _sharedStrings.GetRichText(out index);
        var stack = new ElementStack();
        IElement elem;
        foreach (var obj in _cache)
        {
          elem = obj as IElement;
          if (elem != null)
          {
            stack.Push(elem);
          }
          else if (obj == EndElement.Instance)
          {
            stack.Pop();
          }
          else if (obj != null)
          {
            var run = new S.Run();
            var font = stack.CurrentStyle.Font;
            if (!font.IsEmpty())
            {
              var prop = new S.RunProperties();
              FontsHelper.AddFontProperties(prop, font, () => prop.Append(new RunFont() { Val = font.GetFamily(FontSet.MsOffice) }));
              run.Append(prop);
            }
            run.Append(new Text()
            {
              Space = SpaceProcessingModeValues.Preserve,
              Text = obj.ToString()
            });
            richText.Append(run);
          }
        }

        var cellRef = CellAddress.GetColumnDesignator(_colIndex) + RowNumber.ToString();
        _writer.WriteStartElement(new S.Cell(), new OpenXmlAttribute[] {
          new OpenXmlAttribute("r", null, cellRef),
          new OpenXmlAttribute("s", null, _styles.Get(cell.Style, -1).ToString()),
          new OpenXmlAttribute("t", null, "s")
        });
        _writer.WriteStartElement(new CellValue());
        _writer.WriteString(index.ToString());
        _writer.WriteEndElement();
        _writer.WriteEndElement();
      }

      _cache.Clear();
      _cacheValues = false;
    }

    private void WriteCell(M.Cell cell, object value, Style style)
    {
      var numFmtId = -1;
      var cellRef = CellAddress.GetColumnDesignator(_colIndex) + RowNumber.ToString();
      string strVal = "";
      var attr = new List<OpenXmlAttribute>() {
        new OpenXmlAttribute("r", null, cellRef)
      };

      if (cell is M.MergedCell)
      {
        attr.Add(new OpenXmlAttribute("s", null, _styles.Get(style, numFmtId).ToString()));
        _writer.WriteStartElement(new S.Cell(), attr);
        _writer.WriteEndElement();
        return;
      }
      else if (value == null)
      {
        // Do Nothing
      }
      else if (value is Int16 || value is Int32 || value is Int64 ||
        value is UInt16 || value is UInt32 || value is UInt64 ||
        value is double || value is float || value is decimal)
      {
        numFmtId = 0;
        attr.Add(new OpenXmlAttribute("t", null, "n"));
        strVal = value.ToString();
      }
      else if (value is bool)
      {
        attr.Add(new OpenXmlAttribute("t", null, "b"));
        strVal = ((bool)value ? "1" : "0");
      }
      else if (value is DateTime)
      {
        var dateVal = (DateTime)value;
        numFmtId = (dateVal.Date == dateVal ? 14 : 22);
        strVal = dateVal.ToOADate().ToString();
      }
      else if (value is System.Drawing.Image)
      {
        _images.AddImage((System.Drawing.Image)value, _colIndex, _rowIndex, 0, 0);
        _writer.WriteStartElement(new S.Cell(), attr);
        _writer.WriteEndElement();
        return;
      }
      else if (value is IHyperlink)
      {
        var hyperLink = value as IHyperlink;
        attr.Add(new OpenXmlAttribute("t", null, "s"));
        strVal = _sharedStrings.Get(hyperLink.Text).ToString();
        _hyperlinks.Get(hyperLink.Target, cellRef);
      }
      else if (value is Uri)
      {
        attr.Add(new OpenXmlAttribute("t", null, "s"));
        strVal = _sharedStrings.Get(value.ToString()).ToString();
        _hyperlinks.Get((Uri)value, cellRef);
      }
      else
      {
        attr.Add(new OpenXmlAttribute("t", null, "s"));
        string formatted;
        if (value is IEnumerable<string>)
          formatted = string.Join(", ", (IEnumerable<string>)value);
        else
          formatted = value.ToString();

        strVal = _sharedStrings.Get(formatted).ToString();
        var uri = value as Uri;
        if (uri != null) _hyperlinks.Get(uri, cellRef);
      }
      attr.Add(new OpenXmlAttribute("s", null, _styles.Get(style, numFmtId).ToString()));

      _writer.WriteStartElement(new S.Cell(), attr);
      _writer.WriteStartElement(new CellValue());
      _writer.WriteString(strVal);
      _writer.WriteEndElement();
      _writer.WriteEndElement();
    }

    private static string ColorToString(ColorValue value)
    {
      return "FF" + value.R.ToString("X2") + value.G.ToString("X2") + value.B.ToString("X2");
    }

    private class BordersHelper
    {
      private Dictionary<M.Borders, int> _values = new Dictionary<M.Borders, int>();
      private S.Borders _part = new S.Borders();

      public S.Borders Part
      {
        get
        {
          _part.Count = (uint)_values.Count;
          return _part;
        }
      }

      private BorderStyleValues GetStyle(M.Border border)
      {
        if (border.Style == BorderStyle.Double)
        {
          return BorderStyleValues.Double;
        }
        else if (border.Width.ToPx() < 1)
        {
          return BorderStyleValues.Hair;
        }
        else if (border.Width.ToPx() < 3)
        {
          switch (border.Style)
          {
            case BorderStyle.DashDot:
              return BorderStyleValues.DashDot;
            case BorderStyle.DashDotDot:
              return BorderStyleValues.DashDotDot;
            case BorderStyle.Dashed:
              return BorderStyleValues.Dashed;
            case BorderStyle.Dotted:
              return BorderStyleValues.Dotted;
            case BorderStyle.Inherit:
            case BorderStyle.Hidden:
            case BorderStyle.None:
              return BorderStyleValues.None;
            default:
              return BorderStyleValues.Thin;
          }
        }
        else if (border.Width.ToPx() < 5)
        {
          switch (border.Style)
          {
            case BorderStyle.DashDot:
              return BorderStyleValues.MediumDashDot;
            case BorderStyle.DashDotDot:
              return BorderStyleValues.MediumDashDotDot;
            case BorderStyle.Dashed:
              return BorderStyleValues.MediumDashed;
            case BorderStyle.Inherit:
            case BorderStyle.Hidden:
            case BorderStyle.None:
              return BorderStyleValues.None;
            default:
              return BorderStyleValues.Medium;
          }
        }
        else
        {
          return BorderStyleValues.Thick;
        }
      }

      private BorderPropertiesType Configure(BorderPropertiesType props, M.Border value)
      {
        if (value.IsVisible())
        {
          props.Color = new Color() { Rgb = ColorToString(value.Color) };
          props.Style = GetStyle(value);
        }
        return props;
      }

      public int Get(M.Borders value)
      {
        int index;
        value = value ?? new M.Borders();
        if (!_values.TryGetValue(value, out index))
        {
          index = _values.Count;
          _values[value] = index;

          var item = new S.Border();
          item.Append(Configure(new LeftBorder(), value.Left));
          item.Append(Configure(new RightBorder(), value.Right));
          item.Append(Configure(new TopBorder(), value.Top));
          item.Append(Configure(new BottomBorder(), value.Bottom));
          item.Append(new DiagonalBorder());
          _part.Append(item);
        }
        return index;
      }
    }


    private class FillsHelper
    {
      private Dictionary<IBackground, int> _values = new Dictionary<IBackground, int>();
      private int _index = 0;
      private Fills _part = new Fills();

      public Fills Part
      {
        get
        {
          _part.Count = (uint)_index;
          return _part;
        }
      }

      public FillsHelper()
      {
        this.Get(ColorValue.Empty);
        var item = new Fill();
        item.Append(new PatternFill() { PatternType = PatternValues.Gray125 });
        _part.Append(item);
        _index++;
      }

      public int Get(IBackground value)
      {
        int index;
        value = value ?? ColorValue.Empty;
        if (!_values.TryGetValue(value, out index))
        {
          index = _index;
          _index++;
          _values[value] = index;
          var item = new Fill();
          if (value == null
            || value.Equals(ColorValue.Transparent)
            || value.Equals(ColorValue.Empty))
          {
            item.Append(new PatternFill() { PatternType = PatternValues.None });
          }
          else if (value is ColorValue)
          {
            var color = (ColorValue)value;
            var patternFill = new PatternFill() { PatternType = PatternValues.Solid };
            patternFill.Append(new ForegroundColor() { Rgb = ColorToString(color) });
            patternFill.Append(new BackgroundColor() { Rgb = ColorToString(color) });
            item.Append(patternFill);
          }
          else
          {
            throw new NotSupportedException();
          }
          _part.Append(item);
        }
        return index;
      }
    }

    private class FontsHelper
    {
      private Dictionary<M.Font, int> _values = new Dictionary<M.Font, int>();
      private Fonts _part = new Fonts();

      public Fonts Part
      {
        get
        {
          _part.Count = (uint)_values.Count;
          return _part;
        }
      }

      public int Get(M.Font value)
      {
        int index;
        if (!_values.TryGetValue(value, out index))
        {
          index = _values.Count;
          _values[value] = index;

          var item = new S.Font();
          AddFontProperties(item, value, () => item.Append(new FontName() { Val = value.GetFamily(FontSet.MsOffice) }));

          _part.Append(item);
        }
        return index;
      }

      public static void AddFontProperties(OpenXmlElement elem, M.Font font, Action addName)
      {
        if (font.IsBold()) elem.Append(new Bold());
        if (font.IsItalic()) elem.Append(new Italic());
        if (font.IsStrikeThrough()) elem.Append(new Strike());
        if (font.IsUnderlined())
        {
          var underline = new Underline();
          if ((font.Decoration & TextDecoration.Double) != 0)
            underline.Val = UnderlineValues.Double;
          elem.Append(underline);
        }
        switch (font.VerticalAlign)
        {
          case VerticalTextAlign.Sub:
            elem.Append(new S.VerticalTextAlignment() { Val = VerticalAlignmentRunValues.Subscript });
            break;
          case VerticalTextAlign.Super:
            elem.Append(new S.VerticalTextAlignment() { Val = VerticalAlignmentRunValues.Superscript });
            break;
        }
        elem.Append(new FontSize() { Val = (font.Size.ToPt() < 1 ? 11 : font.Size.ToPt()) });
        elem.Append(new Color() { Rgb = ColorToString(font.Color.Equals(ColorValue.Transparent) ? ColorValue.Black : font.Color) });
        addName();
        elem.Append(new FontFamilyNumbering() { Val = 2 });
      }
    }

    private class HyperlinkHelper
    {
      private Dictionary<Uri, string> _values = new Dictionary<Uri, string>();
      private List<KeyValuePair<string, string>> _refs = new List<KeyValuePair<string, string>>();
      private WorksheetPart _worksheetPart;

      public int Count { get { return _values.Count; } }

      public HyperlinkHelper(WorksheetPart worksheetPart)
      {
        _worksheetPart = worksheetPart;
      }

      public string Get(Uri value, string cellRef)
      {
        string id;
        if (!_values.TryGetValue(value, out id))
        {
          id = "uri" + _values.Count.ToString();
          _values[value] = id;
          _worksheetPart.AddHyperlinkRelationship(value, true, id);
        }
        _refs.Add(new KeyValuePair<string, string>(cellRef, id));
        return id;
      }

      public void Render(OpenXmlWriter writer)
      {
        writer.WriteStartElement(new Hyperlinks());
        foreach (var link in _refs)
        {
          writer.WriteStartElement(new DocumentFormat.OpenXml.Spreadsheet.Hyperlink(), new OpenXmlAttribute[] {
            new OpenXmlAttribute("ref", null, link.Key),
            new OpenXmlAttribute("id", "http://schemas.openxmlformats.org/officeDocument/2006/relationships", link.Value)
          });
          writer.WriteEndElement();
        }
        writer.WriteEndElement();
      }
    }


    private class ImageHelper
    {
      private Dictionary<string, string> _values = new Dictionary<string, string>();
      private DrawingsPart _drawings;
      private DocumentFormat.OpenXml.Drawing.Spreadsheet.WorksheetDrawing _worksheetDrawing;
      private int _instanceCount = 0;
      private ExcelWriter _parent;

      public int Count { get { return _values.Count; } }

      public ImageHelper(DrawingsPart drawings, ExcelWriter parent)
      {
        _drawings = drawings;
        _parent = parent;

        _worksheetDrawing = new DocumentFormat.OpenXml.Drawing.Spreadsheet.WorksheetDrawing();
        _worksheetDrawing.AddNamespaceDeclaration("xdr", "http://schemas.openxmlformats.org/drawingml/2006/spreadsheetDrawing");
        _worksheetDrawing.AddNamespaceDeclaration("a", "http://schemas.openxmlformats.org/drawingml/2006/main");
        drawings.WorksheetDrawing = _worksheetDrawing;
      }

      private string Get(System.Drawing.Image value)
      {
        string hash;
        string imgId;
        using (var md5 = MD5.Create())
        {
          using (var stream = new MemoryStream())
          {
            value.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
            hash = BitConverter.ToString(md5.ComputeHash(stream.ToArray())).Replace("-", "").ToLowerInvariant();

            if (!_values.TryGetValue(hash, out imgId))
            {
              stream.Position = 0;
              imgId = "imgId" + _values.Count.ToString();
              var part = _drawings.AddNewPart<ImagePart>("image/png", imgId);
              part.FeedData(stream);
              stream.Close();
              _values[hash] = imgId;
            }
          }
        }

        return imgId;
      }

      public void AddImage(System.Drawing.Image value, int column, int row, int xOffset, int yOffset)
      {
        var imgWidth = (long)(value.Width) * (long)(System.Math.Truncate(914400.0 / value.HorizontalResolution));
        var imgHeight = (long)(value.Height) * (long)(System.Math.Truncate(914400.0 / value.VerticalResolution));

        TwoCellAnchor twoCellAnchor = new TwoCellAnchor();

        var fromMarker = new DocumentFormat.OpenXml.Drawing.Spreadsheet.FromMarker();
        fromMarker.Append(new ColumnId() { Text = column.ToString() });
        fromMarker.Append(new ColumnOffset() { Text = xOffset.ToString() });
        fromMarker.Append(new RowId() { Text = row.ToString() });
        fromMarker.Append(new RowOffset() { Text = yOffset.ToString() });

        var toMarker = new DocumentFormat.OpenXml.Drawing.Spreadsheet.ToMarker();
        toMarker.Append(new ColumnId() { Text = column.ToString() });
        toMarker.Append(new ColumnOffset() { Text = (xOffset + imgWidth).ToString() });
        toMarker.Append(new RowId() { Text = row.ToString() });
        toMarker.Append(new RowOffset() { Text = (yOffset + imgHeight).ToString() });

        var picture = new DocumentFormat.OpenXml.Drawing.Spreadsheet.Picture();
        var nonVisualPictureProperties = new NonVisualPictureProperties();
        _instanceCount++;
        var nonVisualDrawingProperties = new NonVisualDrawingProperties()
        {
          Id = 1024U + (uint)_instanceCount,
          Name = "Picture " + _instanceCount.ToString()
        };

        var nonVisualPictureDrawingProperties = new NonVisualPictureDrawingProperties();
        var pictureLocks = new A.PictureLocks() { NoChangeAspect = true };

        nonVisualPictureDrawingProperties.Append(pictureLocks);

        nonVisualPictureProperties.Append(nonVisualDrawingProperties);
        nonVisualPictureProperties.Append(nonVisualPictureDrawingProperties);

        var blipFill = new BlipFill();

        var blip = new A.Blip() { Embed = Get(value) };
        blip.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");

        var blipExtensionList = new A.BlipExtensionList();

        var blipExtension = new A.BlipExtension() { Uri = "{28A0092B-C50C-407E-A947-70E740481C1C}" };

        var useLocalDpi = new A14.UseLocalDpi() { Val = false };
        useLocalDpi.AddNamespaceDeclaration("a14", "http://schemas.microsoft.com/office/drawing/2010/main");

        blipExtension.Append(useLocalDpi);

        blipExtensionList.Append(blipExtension);

        blip.Append(blipExtensionList);

        var stretch = new A.Stretch();
        var fillRectangle1 = new A.FillRectangle();

        stretch.Append(fillRectangle1);

        blipFill.Append(blip);
        blipFill.Append(stretch);

        var shapeProperties = new ShapeProperties();

        var transform2D = new A.Transform2D();
        var offset = new A.Offset()
        {
          X = (column > 0 ? (long)_parent._columns.Take(column).Select(c => c.Width.ToPx() * 9525.7).Sum() : 0) + xOffset,
          Y = 190500L * row + yOffset
        };
        var extents = new A.Extents()
        {
          Cx = (long)(value.Width) * (long)(System.Math.Truncate(914400.0 / value.HorizontalResolution)),
          Cy = (long)(value.Height) * (long)(System.Math.Truncate(914400.0 / value.VerticalResolution))
        };

        transform2D.Append(offset);
        transform2D.Append(extents);

        var presetGeometry = new A.PresetGeometry() { Preset = A.ShapeTypeValues.Rectangle };
        var adjustValueList = new A.AdjustValueList();

        presetGeometry.Append(adjustValueList);

        shapeProperties.Append(transform2D);
        shapeProperties.Append(presetGeometry);

        picture.Append(nonVisualPictureProperties);
        picture.Append(blipFill);
        picture.Append(shapeProperties);

        twoCellAnchor.Append(fromMarker);
        twoCellAnchor.Append(toMarker);
        twoCellAnchor.Append(picture);
        twoCellAnchor.Append(new ClientData());

        _worksheetDrawing.Append(twoCellAnchor);
      }
    }

    private class SharedStrings
    {
      private uint _usage;
      private Dictionary<string, int> _values = new Dictionary<string, int>();
      private SharedStringTable _part = new SharedStringTable();

      public SharedStringTable Part
      {
        get
        {
          _part.Count = _usage;
          _part.UniqueCount = (uint)_values.Count;
          return _part;
        }
      }

      public int Get(string value)
      {
        int index;
        if (!_values.TryGetValue(value, out index))
        {
          index = _values.Count;
          _values[value] = index;
          var item = new SharedStringItem();
          item.Append(new Text() { Text = value });
          _part.Append(item);
        }
        _usage++;
        return index;
      }

      public SharedStringItem GetRichText(out int index)
      {
        index = _values.Count;
        _values["RichText~`!@#$%^|[]" + Guid.NewGuid().ToString("N")] = index;
        var result = new SharedStringItem();
        _part.Append(result);
        _usage++;
        return result;
      }
    }

    private class StylesHelper
    {
      private Dictionary<XlStyle, int> _values = new Dictionary<XlStyle, int>();
      private CellFormats _part = new CellFormats();
      private BordersHelper _borders;
      private FillsHelper _fills;
      private FontsHelper _fonts;
      private Style _defaultStyle;

      public StylesHelper(BordersHelper borders, FontsHelper fonts, FillsHelper fills, Style defaultStyle)
      {
        _borders = borders;
        _fonts = fonts;
        _fills = fills;
        this.Get(new Style(), 0);
        _defaultStyle = defaultStyle;
      }

      public CellFormats Part
      {
        get
        {
          _part.Count = (uint)_values.Count;
          return _part;
        }
      }

      public int Get(Style style, int numFtmId)
      {
        style = Style.GetMerged(_defaultStyle, style) ?? new Style();

        var value = new XlStyle()
        {
          NumFmtId = numFtmId < 0 ? 0 : numFtmId,
          BorderId = _borders.Get(style.Borders),
          FillId = _fills.Get(style.Background),
          FontId = _fonts.Get(style.Font),
          TextAlign = style.TextAlign,
          VerticalAlign = style.VerticalAlign,
          WhiteSpace = style.WhiteSpace,
          Indent = (int)(style.TextIndent.ToEm() * 2.0)
        };

        int index;
        if (!_values.TryGetValue(value, out index))
        {
          index = _values.Count;
          _values[value] = index;

          var alignment = new Alignment();
          switch (value.TextAlign)
          {
            case TextAlign.Center:
              alignment.Horizontal = HorizontalAlignmentValues.Center;
              break;
            case TextAlign.CenterContinuous:
              alignment.Horizontal = HorizontalAlignmentValues.CenterContinuous;
              break;
            case TextAlign.Distributed:
              alignment.Horizontal = HorizontalAlignmentValues.Distributed;
              break;
            case TextAlign.Fill:
              alignment.Horizontal = HorizontalAlignmentValues.Fill;
              break;
            case TextAlign.Justify:
              alignment.Horizontal = HorizontalAlignmentValues.Justify;
              break;
            case TextAlign.Right:
              alignment.Horizontal = HorizontalAlignmentValues.Right;
              break;
            default:
              alignment.Horizontal = HorizontalAlignmentValues.Left;
              break;
          }
          switch (value.VerticalAlign)
          {
            case VerticalAlign.Distributed:
              alignment.Vertical = VerticalAlignmentValues.Distributed;
              break;
            case VerticalAlign.Justify:
              alignment.Vertical = VerticalAlignmentValues.Justify;
              break;
            case VerticalAlign.Middle:
              alignment.Vertical = VerticalAlignmentValues.Center;
              break;
            case VerticalAlign.Top:
              alignment.Vertical = VerticalAlignmentValues.Top;
              break;
            default:
              alignment.Vertical = VerticalAlignmentValues.Bottom;
              break;
          }
          switch (value.WhiteSpace)
          {
            case WhiteSpace.Normal:
            case WhiteSpace.Pre:
            case WhiteSpace.PreLine:
            case WhiteSpace.PreWrap:
              alignment.WrapText = true;
              break;
          }

          if (value.Indent > 0) alignment.Indent = (uint)value.Indent;
          var needsAlignment = value.Indent > 0
            || alignment.Horizontal != HorizontalAlignmentValues.Left
            || alignment.Vertical != VerticalAlignmentValues.Bottom
            || (alignment.WrapText != null && alignment.WrapText.HasValue);

          var format = new CellFormat()
          {
            FormatId = 0U,
            NumberFormatId = (uint)value.NumFmtId,
            FontId = (uint)value.FontId,
            FillId = (uint)value.FillId,
            BorderId = (uint)value.BorderId,
            ApplyFill = value.FillId > 0,
            ApplyAlignment = needsAlignment,
            ApplyProtection = true,
            ApplyNumberFormat = (value.NumFmtId >= 0)
          };
          if (needsAlignment) format.Append(alignment);
          _part.Append(format);
        }
        return index;
      }

      private class XlStyle
      {
        public int NumFmtId { get; set; }
        public int FontId { get; set; }
        public int FillId { get; set; }
        public int BorderId { get; set; }
        public int Indent { get; set; }
        public TextAlign TextAlign { get; set; }
        public VerticalAlign VerticalAlign { get; set; }
        public WhiteSpace WhiteSpace { get; set; }

        public override int GetHashCode()
        {
          return this.NumFmtId
            ^ this.FontId
            ^ this.FillId
            ^ this.BorderId
            ^ (int)this.TextAlign
            ^ (int)this.VerticalAlign
            ^ (int)this.WhiteSpace
            ^ this.Indent;
        }

        public override bool Equals(object obj)
        {
          var style = obj as XlStyle;
          if (style == null) return false;
          return Equals(style);
        }
        public bool Equals(XlStyle obj)
        {
          return this.NumFmtId == obj.NumFmtId
            && this.FontId == obj.FontId
            && this.FillId == obj.FillId
            && this.BorderId == obj.BorderId
            && this.TextAlign == obj.TextAlign
            && this.VerticalAlign == obj.VerticalAlign
            && this.WhiteSpace == obj.WhiteSpace
            && this.Indent == obj.Indent;
        }
      }
    }
  }
}
